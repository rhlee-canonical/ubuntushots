#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""Update package information from the UniversalDebianDatabase/dde.debian.net"""

# TODO: support debtags format: use::{downloading,proxying,storing}

import logging
import logging.config
import os
import urllib
import sys
import re
import bz2
from paste.deploy import appconfig
from pylons import config
from debshots.config.environment import load_environment
#from urllib2 import urlopen
#import cPickle as pickle
#import tempfile
#import gzip
from debshots.model import meta
from debshots import model
#from debshots.lib import packageimport
import debian.deb822
from urllib2 import urlopen
import subprocess

#---------------------------

# Make the INI file specified as a command-line argument an absolute path
if len(sys.argv)<2:
    print "Please specify your INI file as an argument"
    sys.exit(10)
ini_file = os.path.abspath(sys.argv[-1])
if not os.path.isfile(ini_file):
    print "INI file '%s' not found" % (ini_file)
    sys.exit(10)

logging.config.fileConfig(ini_file)
log = logging.getLogger('debshots')
conf = appconfig('config:' + ini_file)
load_environment(conf.global_conf, conf.local_conf)

# Initialize database

db = model.meta.Session

def download_packages_and_parse(url):
    """Download a Packages file and use debian.deb822.Deb822 to parse it"""
    # Download and parse Packages files
    log.info("Downloading package information from: %s" % url)

    log.info("Parsing Packages file")
    packages = {}
    for pkg in debian.deb822.Packages.iter_paragraphs(sequence=urlopen(url)):
        log.debug("Package: %s", pkg['package'])
        # Create a hash array consisting of:
        # packagename -> hash with package information
        #print pkg
        packages[pkg['package']]=pkg
    return packages

def go_through_packages_database(packages):
    """Read what packages are currently in the debshots database"""
    packages = {}
    for pkg in db.query(model.Package):
        #print pkg
        #print pkg.name
        packages[pkg['name']]=pkg
    return packages

# Run an external command and return stdout and stderr
# Needs Python 2.4!
def run(command,input=''):
    run = subprocess.Popen(command, shell=True,
        stdin =subprocess.PIPE,
        stdout=subprocess.PIPE,
        stderr=subprocess.PIPE,
        )

    run.stdin.write(input)
    run.stdin.close()
    stdout = run.stdout.readlines()
    stderr = run.stderr.readlines()
    returncode = run.wait()

    # Strip newlines at the end of each line
    stdout = [line.rstrip('\n') for line in stdout]
    stderr = [line.rstrip('\n') for line in stderr]

    return returncode,stdout,stderr

def update_package_information(pkg, new):
    """Update a packages information

    pkg: model.Package object referring to what we currently know about the package
    new: package information from the repository"""
    #log.debug("Before...")
    #log.debug(pkg)
    pkg.version = new['version']
    pkg.section = new['section']
    pkg.homepage = new.get('homepage') # optional
    pkg.desription = new['description'].splitlines()[0]
    pkg.long_desription = '\n'.join(new['description'].splitlines()[1:])

    # Split the maintainer field into real name and email address
    # if it follows the "Name <email>" format.
    match = re.search(r'^(.*?) <(.*?)>$', new['maintainer'])
    if match:
        maint_name, maint_email = match.groups()
        maint_name=unicode(maint_name)
        maint_email=unicode(maint_email)
    else:
        # Just the email address. Happened in Ubuntu packages.
        maint_name = maint_email = pkg['maintainer']

    pkg.maintainer = maint_name
    pkg.maintainer_email = maint_email

    # Update debtags
    log.debug('Updating debtags for this package')
    pkg.debtags = []
    if 'tag' in new:
        # Create a list of tags this package should get assigned
        tags = []
        for tag in new['tag'].split(', '):
            #tag = tag.strip()
            # support "use::{downloading,proxying,storing}" format
            if '{' in tag:
                match = re.search(r'^(.*)::\{(.*)\}$', tag)
                if not match:
                    log.error("Could not parse debtags format from tag: %s", tag)
                facet, subtags = match.groups()
                for subtag in subtags.split(','):
                    tags.append('%s::%s' % (facet, subtag))
            else:
                tags.append(tag)

        # Now go through the list of tags anda ssign it to the package
        for tag in tags:
            #tag=strip(tag)
            # Is this facet supposed to be ignored?
            facet = (tag.split('::'))[0]
            if facet in facets_ignorelist:
                log.debug('Ignoring tag %s according to the facets ignore list (facet=%s)', tag, facet)
                continue

            # Is this debtag supposed to be ignored?
            if tag in tags_ignorelist:
                log.debug('Ignoring tag %s according to the tags ignore list', tag)
                continue

            # Find the tag in the database
            db_debtag = debtags_records.get(tag)
            if not db_debtag:
                log.info('Package %s uses unknown debtag "%s" - ignoring', pkg.name, tag)
                continue
            log.debug('Adding tag %s (#%s) to package', tag, db_debtag.id)
            pkg.debtags.append(db_debtag)

            #log.debug('Tag: %s (%s) / Facet: %s (%s)',
                #tag, tag_description, facet, facet_description)

    #log.debug("After...")
    #log.debug(pkg)

def parse_debtags_descriptions():
    """Download and parse the current debtags vocabulary

    Returns three hashes for facets, debtags and tag records in the database.
    Facets: facet->description
    Debtag: debtag->description
    Debtag database recors: debtag->model.Debtag instance"""

    # Download from e.g. http://svn.debian.org/viewsvn/debtags/vocabulary/trunk/debian-packages
    vocabulary_url = config['debshots.debtags_vocabulary_url']
    log.info('Downloading debtags vocabulary from: %s', vocabulary_url)
    vocabulary_file = urlopen(vocabulary_url)

    facets = {} # major categories of tags (facet->description)
    debtags = {} # debtags (tag->description)
    debtags_records = {} # tag->model.Debtag instance

    log.info('Parsing debtags vocabulary')
    for vocable in debian.deb822.Packages.iter_paragraphs(vocabulary_file):
        # e.g. {'Tag': 'network::routing', 'Description': 'Routing'}
        # e.g. {'Facet': 'web', 'Status': 'draft', 'Description': 'World Wide Web', 'Nature': 'personality'}
        vocdict = dict(vocable)
        #log.info("vocdict: %r", vocdict)
        log.debug('Paragraph: %s', vocdict)
        if 'Facet' in vocdict:
            facets[vocdict['Facet']] = vocdict['Description']
            # e.g. 'mail' -> 'Electronic Mail'

        if 'Tag' in vocdict:
            debtags[vocdict['Tag']] = vocdict['Description']

    # Save the debtags along with facets and descriptions into the database
    for tag in debtags:
        log.debug('Storing tag into database: %s', tag)
        #log.debug('Tag: %s (%s) / Facet: %s (%s)',
            #tag, debtags[tag], facet, facets[facet])
        # Does the tag already exist in the database?
        db_tag = model.Debtag.q().filter_by(tag=tag).first()

        # If the tag is not yet found in the database then create a new entry
        if not db_tag:
            log.info("New tag: %s", tag)
            db_tag = model.Debtag()
            db.add(db_tag)
        else:
            log.info("Updating tag: %s", tag)

        # Store this model.Debtag instance for adding to the packages later
        # (saves looking up the tags from the database again which is very slow)
        debtags_records[tag]=db_tag

        db_tag.tag = tag
        db_tag.description = debtags[tag]
        # The facet is the left part of facet::tag
        # Note: some tags don't have a facet like 'net'
        if '::' in tag:
            facet = tag.split('::')[0]
            db_tag.facet = facet
            db_tag.facet_description = facets[facet]

    db.commit()

    return facets, debtags, debtags_records

#----------------------------------------------------

facets_blacklist = set(config['debshots.debtags_facets_blacklist'].split())
tags_blacklist = set(config['debshots.debtags_tags_blacklist'].split())
facets_ignorelist = set(config['debshots.debtags_facets_ignorelist'].split())
tags_ignorelist = set(config['debshots.debtags_tags_ignorelist'].split())
log.debug('Facets blacklist: %s', '/'.join(facets_blacklist))
log.debug('Tags blacklist: %s', '/'.join(tags_blacklist))
log.debug('Facets ignorelist: %s', '/'.join(facets_ignorelist))
log.debug('Tags ignorelist: %s', '/'.join(tags_ignorelist))

facets, debtags, debtags_records = parse_debtags_descriptions()
log.debug('facets: %r', facets)
log.debug('debtags: %r', debtags)
log.debug('debtags_records: %r', debtags_records)

packages_urls = conf['debshots.packages_update_urls'].split()
packages = {}
for packages_url in packages_urls:
    log.info("Download package information from: %s", packages_url)
    packages_here = download_packages_and_parse(packages_url)
    packages.update(packages_here)

# Go through all known packages in our database
log.info("Checking all known packages in our database")
for pkg in db.query(model.Package):
    log.debug("Package: %s", pkg.name)

    # Package is known to us but not in the Packages file?
    if pkg.name not in packages:
        log.info("Package %s has apparently been removed from the repository. Funny." % pkg.name)
        continue

    # Is our version still up to date?
    log.debug("Our version: %s", pkg.version)
    their_version = packages[pkg.name]['version']
    log.debug("Current version: %s", their_version)

    if conf.get('debshots.update_all_packages')=='yes':
        update_package_information(pkg, packages[pkg.name])
    else:
        if pkg.version != their_version:
            # Use "dpkg --compare-versions" to find out if their version is newer
            ret,out,err=run("dpkg --compare-versions %s gt %s" % (their_version, pkg.version) )
            if ret==0:
                log.debug("Current version is newer - updating our information")
                update_package_information(pkg, packages[pkg.name])
            else:
                log.info("Our information is newer than the repository's. Strange.")
        log.debug("Versions match. No need to update.")

db.commit()

    #sys.exit(0)

#packages = packageimport.parse_packages_file('Packages')
#packageimport.go_through_packages_database(packages)
