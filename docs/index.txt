================================================================================
debshots - a web application to manage screenshots of GUI applications in Debian
================================================================================


About
=====

*debshots* is a simple web application to host screenshots
for the screenshots.debian.net web service. It accepts images
showing different views of GUI applications that are available
in Debian as software package. So users can get a visual impression
of what an application does. Following the karma of
*a picture is worth a thousand words*.

*debshots* is written in Python_ and uses the Pylons_ web framework.

.. _Python: http://www.python.org/
.. _Pylons: http://www.pylonshq.com/


Installation using virtualenv
=============================

It is generally suggested that *debshots* gets deployed using
the *virtualenv* software which creates a seperate Python
environment independent from what Python packages are installed
elsewhere on the system.

#. Install prerequisites.

   > aptitude install python-dev gcc python-virtualenv python-pylons

#. Get your copy of debshots

   > hg clone http://hg.workaround.org/debshots
   > cd debshots

#. Create a virtualenv

   > virtualenv .

#. Activate the virtualenv environment (set some variables like
   $PYTHONPATH so installation of Python packages through
   setuptools/ez_install is done in this directory instead of
   system-wide)

   > source bin/activate

   Your shell prompt should have changed by now and start with
   "(debshots").

#. Install the versions of Python packages that debshots depends on:

   > (debshots) python setup.py develop

   This will get the required packages from the internet and install
   them inside the virtualenv.

#. Edit the 'development.ini' configuration file to control various
   aspects of debshots. Make sure that you set
   "set debug = false" before you deploy the application.

#. Set up the application (e.g. create required directories):

   > (debshots) paster setup-app development.ini

#. Now run the application through a web server:

   > (debshots) paster serve development.ini

#. Before you first run the server you need to get a list of available
   Debian packages. This is done by calling the importer script:

   > (debshots) bin/update_package_cache.py `pwd`/development.ini

   The table should be updated frequently (for example once per day)
   via a cron job.

How does it work?
=================

Anybody can upload new screenshots. For security reasons though (we don't want
porn on the server) screenshots have to be approved by an administrator. The
permission system goes like this:

Visitor (anybody who visits the site):

- can upload screenshots (the new screenshots have status "unapproved"
  and can not be viewed publicly)
- can mark any approved (publicly visible) screenshots as "markedfordelete"
  which means screenshots are still visible but admins will see the tag
  and check if packages can be removed. ('markedfordelete' is a tribute
  to the incredibly trashy movie "The Tower" where the computer system
  "removed" a dove sitting on an air vent after deciding to have it
  "marked for delete").
- can remove their own uploaded screenshots (Screenshots in the database
  also save the session cookie value. So as long as the browser keeps the
  cookie the screenshots can be associated with the uploader.)

Admins (logged in users - accounts are saved in the 'admins' table):

- can upload screenshots that are automatically approved and visible
- can delete any screenshots
- can approve other people's screenshots that are still unapproved
- can see the moderation view of packages that have screenshots that
  are not approved or markedfordelete

Adding administrators
=====================

There is not yet a comfortable way to add administrators. You will have
to enter the Pylons shell by running "paster shell" in the project
(TODO: I think this won't work when deploying the application from an egg)
and create a new user:

  newadmin = model.Admin(name="dilbert")
  newadmin.setpassword('secret')
  db.save(newadmin)
  db.commit()

You must set the password using the setpassword() method or otherwise the
salted MD5 hash wouldn't get computed correctly.

Database structure
==================

There are two tables of packages. The 'cachedbinarypackages' table contains
a list

To Do list
==========

- backlinks to previous pages after removing/approving/uploading
- moderate view shows markedfordelete packages
- list of packages (cachebinarypackages) that do not have screenshots uploaded
- messages everywhere (jGrowl)
