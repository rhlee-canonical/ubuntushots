================================================================================
debshots - a web application to manage screenshots of GUI applications in Debian
================================================================================


About
=====

*debshots* is a simple web application to host screenshots
for the screenshots.debian.net web service. It accepts images
showing different views of GUI applications that are available
in Debian as software package. So users can get a visual impression
of what an application does. Following the karma of
*a picture is worth a thousand words*.

*debshots* is written in Python_ and uses the Pylons_ web framework.

.. _Python: http://www.python.org/
.. _Pylons: http://www.pylonshq.com/


License
=======

debshots is licensed under the terms of the MIT license as follows:

Copyright (c) 2008 Christoph Haas <email@christoph-haas.de>

Permission is hereby granted, free of charge, to any person
obtaining a copy of this software and associated documentation
files (the "Software"), to deal in the Software without
restriction, including without limitation the rights to use,
copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the
Software is furnished to do so, subject to the following
conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
OTHER DEALINGS IN THE SOFTWARE.


Installation using virtualenv
=============================

It is generally suggested that *debshots* gets deployed using
the *virtualenv* software which creates a seperate Python
environment independent from what Python packages are installed
elsewhere on the system.

#. Install prerequisites.

   > aptitude install python-dev gcc python-virtualenv python-pylons

#. Get your copy of debshots

   > hg clone http://hg.workaround.org/debshots
   > cd debshots

#. Create a virtualenv

   > virtualenv .

#. Activate the virtualenv environment (set some variables like
   $PYTHONPATH so installation of Python packages through
   setuptools/ez_install is done in this directory instead of
   system-wide)

   > source bin/activate

   Your shell prompt should have changed by now and start with
   "(debshots").

#. Install the versions of Python packages that debshots depends on:

   > (debshots) python setup.py develop

   This will get the required packages from the internet and install
   them inside the virtualenv.

#. Create a new INI file that contains the global configuration:

  > (debshots) paster make-config debshots my.ini

#. Edit the 'development.ini' configuration file to control various
   aspects of debshots. Make sure that you set
   "set debug = false" before you deploy the application.

#. Set up the application (e.g. create required directories and database):

   > (debshots) paster setup-app my.ini

#. Now run the application through a web server:

   > (debshots) paster serve my.ini

#. Before you first run the server you need to get a list of available
   Debian packages. This is done by calling the importer script:

   > (debshots) bin/update_package_cache.py `pwd`/development.ini

   The table should be updated frequently (for example once per day)
   via a cron job.

How does it work?
=================

Anybody can upload new screenshots. For security reasons though (we don't want
porn on the server) screenshots have to be approved by an administrator. The
permission system goes like this:

Visitor (anybody who visits the site):

- can upload screenshots (the new screenshots have status "unapproved"
  and can not be viewed publicly)
- can mark any approved (publicly visible) screenshots as "markedfordelete"
  which means screenshots are still visible but admins will see the tag
  and check if packages can be removed. ('markedfordelete' is a tribute
  to the incredibly trashy movie "The Tower" where the computer system
  "removed" a dove sitting on an air vent after deciding to have it
  "marked for delete").
- can remove their own uploaded screenshots (Screenshots in the database
  also save the session cookie value. So as long as the browser keeps the
  cookie the screenshots can be associated with the uploader.)

Admins (logged in users - accounts are saved in the 'admins' table):

- can upload screenshots that are automatically approved and visible
- can delete any screenshots
- can approve other people's screenshots that are still unapproved
- can see the moderation view of packages that have screenshots that
  are not approved or markedfordelete

Managing administrators
=======================

New admins can be created using the 'create_admin_user.py' script located
in the 'bin' directory:

  > bin/create_admin_user.py `pwd`/development.ini newusername newpassword

Admin users can be deleted using the 'delete_admin_user.py':

  > bin/delete_admin_user.py `pwd`/development.ini newusername newpassword

Hint: just adding rows to the 'admins' database table will not work.
You must set the password using the setpassword() method or otherwise the
salted MD5 hash used for passwords wouldn't get computed correctly.

Database structure
==================

There are two tables of packages. The 'cachedbinarypackages' table contains
a list of all packages parsed from what's in the archives. The 'packages'
table instead contains a list of all packages that have screenshots
assigned. Each 'package' has a number of 'screenshots' assigned which is
what a user would upload. And in turn each 'screenshot' consists of different
'images' like a big image and a thumbnail. And finally the 'admins' table
has a list of admin users and their (salted MD5-hashed) passwords stored.

To Do list
==========

- list of packages (cachebinarypackages) that do not have screenshots uploaded
  (seems not to be easily possible with SQLAlchemy)
- RSS feed for new uploads
- screenshot index view: allow sorting by upload date
- info for debian weekly news announcement (as soon as ready)
- only allow packages with NOT role::app-data (debtags)
  (svn co svn://svn.debian.org/debtags/tagdb/tags)
  or rather use http://www.enricozini.org/2008/tips/hmpffh.html
- list of packages without screenshots
- optional text for each screenshot
- store the version of the package (suggest the newest version
  of the package but let the user change that when uploading) screenshot
- move to zepolen's server
- sync screenshots in database and on disk
- what happens to screenshots of packages where the cachedbinarypackage
  got removed?
- statistics page (packages, screenshots, per section)
